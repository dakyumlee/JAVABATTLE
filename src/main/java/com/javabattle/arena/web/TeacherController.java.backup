package com.javabattle.arena.web;

import com.javabattle.arena.model.ActiveSession;
import com.javabattle.arena.service.SessionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api")
public class TeacherController {
    
    @Autowired
    private SessionService sessionService;
    
    @Autowired
    private SimpMessagingTemplate messagingTemplate;
    
    @GetMapping("/teacher/active-students")
    public ResponseEntity<List<Map<String, Object>>> getActiveStudents() {
        try {
            List<ActiveSession> sessions = sessionService.getActiveSessions();
            
            List<Map<String, Object>> result = sessions.stream().map(session -> {
                Map<String, Object> studentData = new HashMap<>();
                studentData.put("userId", session.getUserId());
                studentData.put("sessionId", session.getSessionId());
                studentData.put("currentPage", session.getCurrentPage());
                studentData.put("lastActivity", session.getLastActivity());
                studentData.put("isCoding", session.getIsCoding());
                studentData.put("codeLength", session.getCurrentCode() != null ? session.getCurrentCode().length() : 0);
                studentData.put("startTime", session.getStartTime());
                return studentData;
            }).collect(Collectors.toList());
            
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }
    
    @PostMapping("/teacher/send-hint")
    public ResponseEntity<Map<String, Object>> sendHint(@RequestBody Map<String, Object> request) {
        try {
            Long studentId = Long.valueOf(request.get("studentId").toString());
            String message = (String) request.get("message");
            
            Map<String, Object> hintData = new HashMap<>();
            hintData.put("type", "HINT");
            hintData.put("message", message);
            hintData.put("from", "teacher");
            hintData.put("timestamp", LocalDateTime.now());
            
            messagingTemplate.convertAndSendToUser(
                studentId.toString(), 
                "/queue/hints", 
                hintData
            );
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Hint sent successfully");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "Failed to send hint: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }
    
    @PostMapping("/teacher/global-hint")
    public ResponseEntity<Map<String, Object>> sendGlobalHint(@RequestBody Map<String, Object> request) {
        try {
            String message = (String) request.get("message");
            
            Map<String, Object> hintData = new HashMap<>();
            hintData.put("type", "GLOBAL_HINT");
            hintData.put("message", message);
            hintData.put("from", "teacher");
            hintData.put("timestamp", LocalDateTime.now());
            
            messagingTemplate.convertAndSend("/topic/global-hints", hintData);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Global hint sent successfully");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "Failed to send global hint: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }
    
    @PostMapping("/teacher/create-problem")
    public ResponseEntity<Map<String, Object>> createProblem(@RequestBody Map<String, Object> request) {
        try {
            String title = (String) request.get("title");
            String description = (String) request.get("description");
            
            Map<String, Object> problemData = new HashMap<>();
            problemData.put("type", "NEW_PROBLEM");
            problemData.put("title", title);
            problemData.put("description", description);
            problemData.put("from", "teacher");
            problemData.put("timestamp", LocalDateTime.now());
            
            messagingTemplate.convertAndSend("/topic/teacher-announcements", problemData);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Problem created and announced successfully");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "Failed to create problem: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }
    
    @PostMapping("/teacher/quick-quiz")
    public ResponseEntity<Map<String, Object>> sendQuickQuiz(@RequestBody Map<String, Object> request) {
        try {
            String title = (String) request.get("title");
            String question = (String) request.get("question");
            List<String> options = (List<String>) request.get("options");
            Integer correctAnswer = (Integer) request.get("correctAnswer");
            
            Map<String, Object> quizData = new HashMap<>();
            quizData.put("type", "QUICK_QUIZ");
            quizData.put("title", title);
            quizData.put("question", question);
            quizData.put("options", options);
            quizData.put("correctAnswer", correctAnswer);
            quizData.put("from", "teacher");
            quizData.put("timestamp", LocalDateTime.now());
            quizData.put("duration", 60);
            
            messagingTemplate.convertAndSend("/topic/quiz-broadcast", quizData);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Quiz sent successfully");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "Failed to send quiz: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }
    
    @PostMapping("/student/submit-answer")
    public ResponseEntity<Map<String, Object>> submitAnswer(@RequestBody Map<String, Object> request) {
        try {
            Object userIdObj = request.get("userId");
            String answer = (String) request.get("answer");
            String timestamp = (String) request.get("timestamp");
            
            Long userId = null;
            if (userIdObj instanceof Integer) {
                userId = ((Integer) userIdObj).longValue();
            } else if (userIdObj instanceof Long) {
                userId = (Long) userIdObj;
            } else if (userIdObj instanceof String) {
                userId = Long.valueOf((String) userIdObj);
            }
            
            if (userId == null || answer == null || answer.trim().isEmpty()) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", false);
                response.put("message", "사용자 ID와 답안은 필수입니다.");
                return ResponseEntity.badRequest().body(response);
            }
            
            System.out.println("=== 답안 제출 수신 ===");
            System.out.println("학생 ID: " + userId);
            System.out.println("답안 내용: " + answer);
            System.out.println("제출 시간: " + timestamp);
            System.out.println("답안 길이: " + answer.length() + "자");
            System.out.println("==================");
            
            Map<String, Object> answerNotification = new HashMap<>();
            answerNotification.put("type", "ANSWER_SUBMITTED");
            answerNotification.put("userId", userId);
            answerNotification.put("answer", answer);
            answerNotification.put("timestamp", timestamp);
            answerNotification.put("answerLength", answer.length());
            
            messagingTemplate.convertAndSend("/topic/teacher-notifications", answerNotification);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "답안이 성공적으로 제출되었습니다.");
            response.put("submittedAt", LocalDateTime.now());
            
            return ResponseEntity.ok(response);
            
        } catch (NumberFormatException e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "잘못된 사용자 ID 형식입니다.");
            return ResponseEntity.badRequest().body(response);
        } catch (Exception e) {
            e.printStackTrace();
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "답안 제출 중 오류가 발생했습니다: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }
}