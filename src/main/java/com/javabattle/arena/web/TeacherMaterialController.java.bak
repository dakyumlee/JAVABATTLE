package com.javabattle.arena.web;

import com.javabattle.arena.model.TeacherMaterial;
import com.javabattle.arena.model.Quiz;
import com.javabattle.arena.repository.TeacherMaterialRepository;
import com.javabattle.arena.repository.QuizRepository;
import com.javabattle.arena.config.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.servlet.http.HttpServletRequest;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Controller
@RequestMapping("/api/teacher")
public class TeacherMaterialController {

    @Autowired
    private TeacherMaterialRepository materialRepository;

    @Autowired
    private QuizRepository quizRepository;

    @Autowired
    private JwtUtil jwtUtil;

    private final String UPLOAD_DIR = System.getProperty("user.home") + "/uploads/";

    @GetMapping("/teacher-materials")
    public String teacherMaterials() {
        return "teacher-materials";
    }

    @PostMapping("/materials/upload")
    @ResponseBody
    public ResponseEntity<?> uploadMaterial(@RequestParam(value = "file", required = false) MultipartFile file,
                                          @RequestParam("title") String title,
                                          @RequestParam(value = "description", required = false) String description,
                                          @RequestParam(value = "category", required = false) String category,
                                          @RequestParam(value = "tags", required = false) String tags,
                                          HttpServletRequest request) {
        try {
            String token = extractToken(request);
            if (token == null) {
                return ResponseEntity.badRequest().body(createErrorResponse("토큰이 없습니다"));
            }

            Long userId = jwtUtil.extractUserId(token);

            if (title == null || title.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(createErrorResponse("제목은 필수입니다"));
            }

            TeacherMaterial material = new TeacherMaterial();
            material.setTitle(title.trim());
            material.setDescription(description != null && !description.trim().isEmpty() ? description.trim() : "설명 없음");
            material.setCategory(category != null ? category.trim() : "");
            material.setTags(tags != null ? tags.trim() : "");
            material.setUploadedBy(userId);
            material.setShared(false);
            material.setCreatedAt(LocalDateTime.now());

            if (file != null && !file.isEmpty()) {
                String uploadResult = handleFileUpload(file, material);
                if (uploadResult != null) {
                    return ResponseEntity.badRequest().body(createErrorResponse(uploadResult));
                }
            } else {
                material.setFileType("text");
            }

            materialRepository.save(material);

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "자료가 성공적으로 업로드되었습니다.");
            response.put("materialId", material.getId());

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(createErrorResponse("업로드 중 오류가 발생했습니다: " + e.getMessage()));
        }
    }

    @PostMapping("/materials/youtube")
    @ResponseBody
    public ResponseEntity<?> addYouTubeLink(@RequestBody Map<String, String> request,
                                          HttpServletRequest httpRequest) {
        try {
            String token = extractToken(httpRequest);
            if (token == null) {
                return ResponseEntity.badRequest().body(createErrorResponse("토큰이 없습니다"));
            }

            Long userId = jwtUtil.extractUserId(token);

            String title = request.get("title");
            String url = request.get("url");

            if (title == null || title.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(createErrorResponse("제목은 필수입니다"));
            }

            if (url == null || !isValidYouTubeUrl(url)) {
                return ResponseEntity.badRequest().body(createErrorResponse("올바른 YouTube URL이 아닙니다"));
            }

            TeacherMaterial material = new TeacherMaterial();
            material.setTitle(title.trim());
            material.setDescription(request.get("description") != null ? request.get("description").trim() : "");
            material.setCategory(request.get("category") != null ? request.get("category").trim() : "");
            material.setTags(request.get("tags") != null ? request.get("tags").trim() : "");
            material.setYoutubeUrl(url);
            material.setFileType("youtube");
            material.setUploadedBy(userId);
            material.setShared(false);
            material.setCreatedAt(LocalDateTime.now());

            materialRepository.save(material);

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "YouTube 링크가 추가되었습니다.");
            response.put("materialId", material.getId());

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(createErrorResponse("YouTube 링크 추가 중 오류가 발생했습니다: " + e.getMessage()));
        }
    }

    @GetMapping("/materials")
    @ResponseBody
    public ResponseEntity<List<TeacherMaterial>> getMaterials(HttpServletRequest request) {
        try {
            String token = extractToken(request);
            if (token == null) {
                return ResponseEntity.badRequest().build();
            }

            Long userId = jwtUtil.extractUserId(token);
            List<TeacherMaterial> materials = materialRepository.findByTeacherId(userId);
            return ResponseEntity.ok(materials);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping("/shared-materials")
    @ResponseBody
    public ResponseEntity<List<TeacherMaterial>> getSharedMaterials() {
        try {
            List<TeacherMaterial> sharedMaterials = materialRepository.findAllOrderByCreatedAtDesc();
            return ResponseEntity.ok(sharedMaterials);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/materials/{id}/share")
    @ResponseBody
    public ResponseEntity<?> shareMaterial(@PathVariable Long id, HttpServletRequest request) {
        try {
            String token = extractToken(request);
            if (token == null) {
                return ResponseEntity.badRequest().body(createErrorResponse("토큰이 없습니다"));
            }

            Long userId = jwtUtil.extractUserId(token);

            Optional<TeacherMaterial> materialOpt = materialRepository.findById(id);
            if (!materialOpt.isPresent()) {
                return ResponseEntity.badRequest().body(createErrorResponse("자료를 찾을 수 없습니다"));
            }

            TeacherMaterial material = materialOpt.get();
            if (!material.getUploadedBy().equals(userId)) {
                return ResponseEntity.badRequest().body(createErrorResponse("권한이 없습니다"));
            }

            material.setShared(!material.getShared());
            materialRepository.save(material);

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("shared", material.getShared());
            response.put("message", material.getShared() ? "학생들에게 공유되었습니다." : "공유가 중지되었습니다.");

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(createErrorResponse("공유 설정 중 오류가 발생했습니다: " + e.getMessage()));
        }
    }

    @PutMapping("/materials/{id}")
    @ResponseBody
    public ResponseEntity<?> updateMaterial(@PathVariable Long id,
                                          @RequestBody Map<String, String> request,
                                          HttpServletRequest httpRequest) {
        try {
            String token = extractToken(httpRequest);
            if (token == null) {
                return ResponseEntity.badRequest().body(createErrorResponse("토큰이 없습니다"));
            }

            Long userId = jwtUtil.extractUserId(token);

            Optional<TeacherMaterial> materialOpt = materialRepository.findById(id);
            if (!materialOpt.isPresent()) {
                return ResponseEntity.badRequest().body(createErrorResponse("자료를 찾을 수 없습니다"));
            }

            TeacherMaterial material = materialOpt.get();
            if (!material.getUploadedBy().equals(userId)) {
                return ResponseEntity.badRequest().body(createErrorResponse("권한이 없습니다"));
            }

            if (request.get("title") != null) {
                material.setTitle(request.get("title").trim());
            }
            if (request.get("description") != null) {
                material.setDescription(request.get("description").trim());
            }
            if (request.get("category") != null) {
                material.setCategory(request.get("category").trim());
            }
            if (request.get("tags") != null) {
                material.setTags(request.get("tags").trim());
            }

            materialRepository.save(material);

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "자료가 수정되었습니다.");

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(createErrorResponse("수정 중 오류가 발생했습니다: " + e.getMessage()));
        }
    }

    @DeleteMapping("/materials/{id}")
    @ResponseBody
    public ResponseEntity<?> deleteMaterial(@PathVariable Long id, HttpServletRequest request) {
        try {
            String token = extractToken(request);
            if (token == null) {
                return ResponseEntity.badRequest().body(createErrorResponse("토큰이 없습니다"));
            }

            Long userId = jwtUtil.extractUserId(token);

            Optional<TeacherMaterial> materialOpt = materialRepository.findById(id);
            if (!materialOpt.isPresent()) {
                return ResponseEntity.badRequest().body(createErrorResponse("자료를 찾을 수 없습니다"));
            }

            TeacherMaterial material = materialOpt.get();
            if (!material.getUploadedBy().equals(userId)) {
                return ResponseEntity.badRequest().body(createErrorResponse("권한이 없습니다"));
            }

            if (material.getFileName() != null && !material.getFileName().isEmpty()) {
                deletePhysicalFile(material.getFileName());
            }

            materialRepository.delete(material);

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "자료가 삭제되었습니다.");

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(createErrorResponse("삭제 중 오류가 발생했습니다: " + e.getMessage()));
        }
    }

    @GetMapping("/materials/{id}/download")
    public ResponseEntity<Resource> downloadMaterial(@PathVariable Long id, HttpServletRequest request) {
        try {
            String token = extractToken(request);
            if (token == null) {
                return ResponseEntity.badRequest().build();
            }

            Optional<TeacherMaterial> materialOpt = materialRepository.findById(id);
            if (!materialOpt.isPresent()) {
                return ResponseEntity.badRequest().build();
            }

            TeacherMaterial material = materialOpt.get();
            if (material.getFileName() == null || material.getFileName().isEmpty()) {
                return ResponseEntity.badRequest().build();
            }

            Path filePath = Paths.get(UPLOAD_DIR).resolve(material.getFileName()).normalize();
            Resource resource = new UrlResource(filePath.toUri());

            if (!resource.exists() || !resource.isReadable()) {
                return ResponseEntity.notFound().build();
            }

            String originalFileName = material.getFileName();
            if (originalFileName.contains("_")) {
                originalFileName = originalFileName.substring(originalFileName.indexOf("_") + 1);
            }

            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + originalFileName + "\"")
                    .body(resource);

        } catch (MalformedURLException e) {
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @GetMapping("/materials/{id}/view")
    public String viewMaterial(@PathVariable Long id, Model model, HttpServletRequest request) {
        try {
            Optional<TeacherMaterial> materialOpt = materialRepository.findById(id);
            if (!materialOpt.isPresent()) {
                model.addAttribute("error", "자료를 찾을 수 없습니다.");
                return "material-error";
            }

            TeacherMaterial material = materialOpt.get();
            
            if (material.getYoutubeUrl() != null && !material.getYoutubeUrl().isEmpty()) {
                return "redirect:" + material.getYoutubeUrl();
            }
            
            if (material.getFileName() != null && !material.getFileName().isEmpty()) {
                Path filePath = Paths.get(UPLOAD_DIR).resolve(material.getFileName()).normalize();
                if (Files.exists(filePath)) {
                    String fileExtension = getFileExtension(material.getFileName());
                    String contentType = material.getFileType();
                    
                    model.addAttribute("material", material);
                    model.addAttribute("filePath", "/api/teacher/materials/" + id + "/download");
                    model.addAttribute("fileExtension", fileExtension);
                    model.addAttribute("contentType", contentType);
                    
                    if (contentType != null && contentType.startsWith("image/")) {
                        return "material-preview-image";
                    } else if ("application/pdf".equals(contentType)) {
                        return "material-preview-pdf";
                    } else {
                        return "material-preview-file";
                    }
                }
            }
            
            model.addAttribute("material", material);
            return "material-preview-text";
            
        } catch (Exception e) {
            model.addAttribute("error", "미리보기 중 오류가 발생했습니다.");
            return "material-error";
        }
    }

    @GetMapping("/materials/stats")
    @ResponseBody
    public ResponseEntity<?> getMaterialStats(HttpServletRequest request) {
        try {
            String token = extractToken(request);
            if (token == null) {
                return ResponseEntity.badRequest().body(createErrorResponse("토큰이 없습니다"));
            }

            Long userId = jwtUtil.extractUserId(token);
            List<TeacherMaterial> materials = materialRepository.findByTeacherId(userId);

            long totalMaterials = materials.size();
            long totalSize = materials.stream()
                    .mapToLong(m -> m.getFileSize() != null ? m.getFileSize() : 0)
                    .sum();

            LocalDateTime weekAgo = LocalDateTime.now().minusDays(7);
            long recentUploads = materials.stream()
                    .filter(m -> m.getCreatedAt() != null && m.getCreatedAt().isAfter(weekAgo))
                    .count();

            long activeShares = materials.stream()
                    .filter(m -> Boolean.TRUE.equals(m.getShared()))
                    .count();

            Map<String, Object> stats = new HashMap<>();
            stats.put("totalMaterials", totalMaterials);
            stats.put("totalSize", totalSize);
            stats.put("recentUploads", recentUploads);
            stats.put("activeShares", activeShares);

            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(createErrorResponse("통계 조회 중 오류가 발생했습니다: " + e.getMessage()));
        }
    }

    @PostMapping("/quiz")
    @ResponseBody
    public ResponseEntity<?> createQuiz(@RequestBody Map<String, Object> request,
                                      HttpServletRequest httpRequest) {
        try {
            String token = extractToken(httpRequest);
            if (token == null) {
                return ResponseEntity.badRequest().body(createErrorResponse("토큰이 없습니다"));
            }

            Long userId = jwtUtil.extractUserId(token);

            Quiz quiz = new Quiz();
            quiz.setTitle((String) request.get("title"));
            quiz.setQuestion((String) request.get("question"));
            
            @SuppressWarnings("unchecked")
            List<String> options = (List<String>) request.get("options");
            quiz.setOptions(String.join(",", options));
            quiz.setCorrectAnswer((Integer) request.get("correctAnswer"));
            quiz.setScheduleType((String) request.get("schedule"));
            quiz.setCreatedBy(userId);

            if ("later".equals(request.get("schedule")) && request.get("scheduleTime") != null) {
                quiz.setScheduleTime(LocalDateTime.parse((String) request.get("scheduleTime")));
            }

            quizRepository.save(quiz);

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "퀴즈가 생성되었습니다.");
            response.put("quizId", quiz.getId());

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(createErrorResponse("퀴즈 생성 중 오류가 발생했습니다: " + e.getMessage()));
        }
    }

    @GetMapping("/quiz/list")
    @ResponseBody
    public ResponseEntity<List<Quiz>> getQuizList(HttpServletRequest request) {
        try {
            String token = extractToken(request);
            if (token == null) {
                return ResponseEntity.badRequest().build();
            }

            List<Quiz> quizzes = quizRepository.findAll();
            return ResponseEntity.ok(quizzes);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }

    private String handleFileUpload(MultipartFile file, TeacherMaterial material) {
        try {
            if (file.getSize() > 100 * 1024 * 1024) {
                return "파일 크기가 100MB를 초과합니다";
            }

            String contentType = file.getContentType();
            if (!isValidFileType(contentType)) {
                return "지원하지 않는 파일 형식입니다";
            }

            Files.createDirectories(Paths.get(UPLOAD_DIR));

            String originalFilename = file.getOriginalFilename();
            if (originalFilename == null || originalFilename.trim().isEmpty()) {
                originalFilename = "uploaded_file";
            }

            String safeFilename = System.currentTimeMillis() + "_" + sanitizeFilename(originalFilename);
            Path filePath = Paths.get(UPLOAD_DIR + safeFilename);

            Files.copy(file.getInputStream(), filePath);

            material.setFileName(safeFilename);
            material.setFileSize(file.getSize());
            material.setFileType(contentType);

            return null;
        } catch (IOException e) {
            return "파일 저장 중 오류가 발생했습니다: " + e.getMessage();
        }
    }

    private void deletePhysicalFile(String fileName) {
        try {
            Path filePath = Paths.get(UPLOAD_DIR + fileName);
            Files.deleteIfExists(filePath);
        } catch (IOException e) {
            System.err.println("파일 삭제 실패: " + fileName + " - " + e.getMessage());
        }
    }

    private boolean isValidFileType(String contentType) {
        if (contentType == null) return false;
        
        return contentType.equals("application/pdf") ||
               contentType.equals("application/vnd.ms-powerpoint") ||
               contentType.equals("application/vnd.openxmlformats-officedocument.presentationml.presentation") ||
               contentType.startsWith("image/") ||
               contentType.startsWith("video/");
    }

    private boolean isValidYouTubeUrl(String url) {
        if (url == null) return false;
        return url.contains("youtube.com/watch") || url.contains("youtu.be/");
    }

    private String sanitizeFilename(String filename) {
        return filename.replaceAll("[^a-zA-Z0-9._-]", "_");
    }

    private String getFileExtension(String filename) {
        if (filename == null || !filename.contains(".")) {
            return "";
        }
        return filename.substring(filename.lastIndexOf(".") + 1).toLowerCase();
    }

    private Map<String, Object> createErrorResponse(String message) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("message", message);
        return response;
    }

    private String extractToken(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (bearerToken != null && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }
        return null;
    }
}