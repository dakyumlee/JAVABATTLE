let stompClient = null;
let userId = null;
let sessionId = null;
let isConnected = false;
let activityInterval = null;

function getUserIdFromToken() {
    const token = localStorage.getItem('jwtToken');
    if (!token) return null;
    
    try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        return payload.userId || payload.sub || payload.id;
    } catch (e) {
        console.error('토큰 파싱 실패:', e);
        return null;
    }
}

function initializeWebSocket() {
    userId = getUserIdFromToken();
    if (!userId) {
        console.log('사용자 ID가 없어 WebSocket 연결을 건너뜁니다.');
        return;
    }
    
    connectWebSocket();
    startSession();
    startActivityTracking();
}

function connectWebSocket() {
    const socket = new SockJS('/ws');
    stompClient = Stomp.over(socket);
    
    stompClient.connect({}, function(frame) {
        console.log('WebSocket 연결됨:', frame);
        isConnected = true;
        
        stompClient.subscribe('/user/queue/hints', function(message) {
            const hintData = JSON.parse(message.body);
            showHint(hintData.message);
        });
        
        stompClient.subscribe('/topic/global-hints', function(message) {
            const hintData = JSON.parse(message.body);
            showGlobalHint(hintData.message);
        });
        
        stompClient.subscribe('/topic/teacher-announcements', function(message) {
            const announcementData = JSON.parse(message.body);
            showAnnouncement(announcementData);
        });
        
        stompClient.subscribe('/topic/quiz-broadcast', function(message) {
            const quizData = JSON.parse(message.body);
            showQuiz(quizData);
        });
        
    }, function(error) {
        console.error('WebSocket 연결 실패:', error);
        isConnected = false;
        setTimeout(connectWebSocket, 5000);
    });
}

function startSession() {
    if (!userId) return;
    
    sessionId = 'session-' + Date.now() + '-' + userId;
    
    fetch('/api/session/start', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('jwtToken')
        },
        body: JSON.stringify({
            userId: userId,
            sessionId: sessionId
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('세션 시작됨:', data.sessionId);
        }
    })
    .catch(error => {
        console.error('세션 시작 실패:', error);
    });
}

function startActivityTracking() {
    if (activityInterval) {
        clearInterval(activityInterval);
    }
    
    activityInterval = setInterval(sendActivityUpdate, 30000);
    
    document.addEventListener('visibilitychange', function() {
        if (!document.hidden) {
            sendActivityUpdate();
        }
    });
    
    sendActivityUpdate();
}

function sendActivityUpdate() {
    if (!userId) return;
    
    const currentPage = window.location.pathname;
    const codeEditor = document.getElementById('codeEditor') || document.getElementById('editor-container');
    let currentCode = '';
    let isCoding = false;
    
    if (codeEditor) {
        if (typeof editor !== 'undefined' && editor) {
            currentCode = editor.getValue();
            isCoding = currentCode.length > 10;
        } else if (codeEditor.value) {
            currentCode = codeEditor.value;
            isCoding = currentCode.length > 10;
        }
    }
    
    fetch('/api/session/update', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('jwtToken')
        },
        body: JSON.stringify({
            userId: userId,
            page: currentPage,
            code: currentCode,
            isCoding: isCoding
        })
    })
    .catch(error => {
        console.error('활동 업데이트 실패:', error);
    });
}

function endSession() {
    if (!userId) return;
    
    fetch('/api/session/end', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('jwtToken')
        },
        body: JSON.stringify({
            userId: userId
        })
    })
    .catch(error => {
        console.error('세션 종료 실패:', error);
    });
    
    if (activityInterval) {
        clearInterval(activityInterval);
    }
    
    if (stompClient && isConnected) {
        stompClient.disconnect();
    }
}

function showHint(message) {
    const hintPopup = document.createElement('div');
    hintPopup.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #3498db;
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        z-index: 10000;
        max-width: 300px;
        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        animation: slideIn 0.3s ease-out;
    `;
    
    hintPopup.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 5px;">💡 선생님 힌트</div>
        <div>${message}</div>
    `;
    
    document.body.appendChild(hintPopup);
    
    setTimeout(() => {
        hintPopup.remove();
    }, 5000);
}

function showGlobalHint(message) {
    const hintPopup = document.createElement('div');
    hintPopup.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: #e74c3c;
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        z-index: 10000;
        max-width: 400px;
        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        animation: slideIn 0.3s ease-out;
    `;
    
    hintPopup.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 5px;">📢 전체 공지</div>
        <div>${message}</div>
    `;
    
    document.body.appendChild(hintPopup);
    
    setTimeout(() => {
        hintPopup.remove();
    }, 8000);
}

function showAnnouncement(data) {
    const popup = document.createElement('div');
    popup.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        border: 2px solid #3498db;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        z-index: 10000;
        max-width: 500px;
        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
    `;
    
    popup.innerHTML = `
        <div style="font-weight: bold; color: #3498db; margin-bottom: 10px;">📝 새로운 문제</div>
        <h3 style="margin-bottom: 10px;">${data.title}</h3>
        <p style="margin-bottom: 15px;">${data.description}</p>
        <button onclick="this.parentElement.remove()" style="
            background: #3498db; 
            color: white; 
            border: none; 
            padding: 8px 16px; 
            border-radius: 6px; 
            cursor: pointer;
        ">확인</button>
    `;
    
    document.body.appendChild(popup);
}

function showQuiz(quizData) {
    const popup = document.createElement('div');
    popup.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        border: 2px solid #e74c3c;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        z-index: 10000;
        max-width: 600px;
        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
    `;
    
    const optionsHtml = quizData.options.map((option, index) => `
        <label style="display: block; margin: 8px 0; cursor: pointer;">
            <input type="radio" name="quizOption" value="${index}" style="margin-right: 8px;">
            ${option}
        </label>
    `).join('');
    
    popup.innerHTML = `
        <div style="font-weight: bold; color: #e74c3c; margin-bottom: 10px;">⚡ 깜짝 퀴즈</div>
        <h3 style="margin-bottom: 10px;">${quizData.title}</h3>
        <p style="margin-bottom: 15px;">${quizData.question}</p>
        <div style="margin-bottom: 15px;">${optionsHtml}</div>
        <div style="display: flex; gap: 10px;">
            <button onclick="submitQuizAnswer(${quizData.correctAnswer}, this.parentElement.parentElement)" style="
                background: #e74c3c; 
                color: white; 
                border: none; 
                padding: 8px 16px; 
                border-radius: 6px; 
                cursor: pointer;
            ">제출</button>
            <button onclick="this.parentElement.parentElement.remove()" style="
                background: #6c757d; 
                color: white; 
                border: none; 
                padding: 8px 16px; 
                border-radius: 6px; 
                cursor: pointer;
            ">건너뛰기</button>
        </div>
    `;
    
    document.body.appendChild(popup);
}

function submitQuizAnswer(correctAnswer, popup) {
    const selectedOption = popup.querySelector('input[name="quizOption"]:checked');
    if (!selectedOption) {
        alert('답을 선택해주세요.');
        return;
    }
    
    const userAnswer = parseInt(selectedOption.value);
    const isCorrect = userAnswer === correctAnswer;
    
    const resultMessage = isCorrect ? '정답입니다! 🎉' : '틀렸습니다. 정답은 ' + (correctAnswer + 1) + '번입니다.';
    
    popup.innerHTML = `
        <div style="text-align: center; padding: 20px;">
            <h3 style="color: ${isCorrect ? '#27ae60' : '#e74c3c'}; margin-bottom: 15px;">
                ${resultMessage}
            </h3>
            <button onclick="this.parentElement.parentElement.remove()" style="
                background: #3498db; 
                color: white; 
                border: none; 
                padding: 8px 16px; 
                border-radius: 6px; 
                cursor: pointer;
            ">확인</button>
        </div>
    `;
}

window.addEventListener('beforeunload', endSession);
window.addEventListener('load', initializeWebSocket);

document.addEventListener('DOMContentLoaded', initializeWebSocket);
