package com.javabattle.arena.web;

import com.javabattle.arena.model.ActiveSession;
import com.javabattle.arena.model.User;
import com.javabattle.arena.model.QuickProblem;
import com.javabattle.arena.model.Quiz;
import com.javabattle.arena.model.TeacherNote;
import com.javabattle.arena.repository.ActiveSessionRepository;
import com.javabattle.arena.repository.UserRepository;
import com.javabattle.arena.repository.QuickProblemRepository;
import com.javabattle.arena.repository.QuizRepository;
import com.javabattle.arena.repository.TeacherNoteRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.web.bind.annotation.*;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/teacher")
@CrossOrigin(origins = "*")
public class TeacherMonitorController {
    
    @Autowired
    private SimpMessagingTemplate messagingTemplate;
    
    @Autowired
    private ActiveSessionRepository sessionRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private QuickProblemRepository quickProblemRepository;
    
    @Autowired
    private QuizRepository quizRepository;
    
    @Autowired
    private TeacherNoteRepository teacherNoteRepository;
    
    @GetMapping("/active-students")
    public Map<String, Object> getActiveStudents() {
        LocalDateTime cutoff = LocalDateTime.now().minusMinutes(5);
        List<ActiveSession> activeSessions = sessionRepository.findActiveSessions(cutoff);
        
        List<Map<String, Object>> students = activeSessions.stream()
            .map(session -> {
                User user = userRepository.findById(session.getUserId()).orElse(null);
                Map<String, Object> studentMap = new HashMap<>();
                studentMap.put("id", session.getUserId());
                studentMap.put("nickname", user != null ? user.getNickname() : "Unknown");
                studentMap.put("currentPage", session.getCurrentPage());
                studentMap.put("isCoding", session.getIsCoding());
                studentMap.put("lastActivity", session.getLastActivity());
                studentMap.put("codeLength", session.getCurrentCode() != null ? session.getCurrentCode().length() : 0);
                return studentMap;
            })
            .collect(Collectors.toList());
        
        Map<String, Object> result = new HashMap<>();
        result.put("students", students);
        result.put("totalCount", students.size());
        result.put("codingCount", students.stream().mapToInt(s -> (Boolean) s.get("isCoding") ? 1 : 0).sum());
        
        return result;
    }
    
    @PostMapping("/send-hint")
    public void sendHint(@RequestBody Map<String, String> request) {
        String studentId = request.get("studentId");
        String message = request.get("message");
        
        Map<String, Object> hintData = new HashMap<>();
        hintData.put("type", "hint");
        hintData.put("message", message);
        hintData.put("timestamp", LocalDateTime.now());
        
        messagingTemplate.convertAndSend("/topic/hint/" + studentId, hintData);
    }
    
    @PostMapping("/global-hint")
    public void sendGlobalHint(@RequestBody Map<String, String> request) {
        String message = request.get("message");
        
        Map<String, Object> hintData = new HashMap<>();
        hintData.put("type", "global-hint");
        hintData.put("message", message);
        hintData.put("timestamp", LocalDateTime.now());
        
        messagingTemplate.convertAndSend("/topic/global-hint", hintData);
    }
    
    @PostMapping("/create-problem")
    public Map<String, Object> createQuickProblem(@RequestBody Map<String, String> request) {
        String title = request.get("title");
        String description = request.get("description");
        
        QuickProblem problem = new QuickProblem(1L, title, description, 10);
        quickProblemRepository.save(problem);
        
        Map<String, Object> problemData = new HashMap<>();
        problemData.put("type", "quick-problem");
        problemData.put("id", problem.getId());
        problemData.put("title", title);
        problemData.put("description", description);
        problemData.put("timeLimit", 10);
        problemData.put("timestamp", LocalDateTime.now());
        
        messagingTemplate.convertAndSend("/topic/quick-problem", problemData);
        
        Map<String, Object> result = new HashMap<>();
        result.put("success", true);
        result.put("problemId", problem.getId());
        return result;
    }
    
    @PostMapping("/quick-quiz")
    public Map<String, Object> startQuickQuiz(@RequestBody Map<String, Object> request) {
        String title = (String) request.get("title");
        String question = (String) request.get("question");
        List<String> options = (List<String>) request.get("options");
        Integer correctAnswer = (Integer) request.get("correctAnswer");
        Integer timeLimit = request.get("timeLimit") != null ? (Integer) request.get("timeLimit") : 30;
        
        Quiz quiz = new Quiz(1L, title, question, 
                           options.get(0), options.get(1), 
                           options.size() > 2 ? options.get(2) : null,
                           options.size() > 3 ? options.get(3) : null,
                           correctAnswer, timeLimit);
        quizRepository.save(quiz);
        
        Map<String, Object> quizData = new HashMap<>();
        quizData.put("type", "quick-quiz");
        quizData.put("title", title);
        quizData.put("question", question);
        quizData.put("options", options);
        quizData.put("timeLimit", timeLimit);
        quizData.put("timestamp", LocalDateTime.now());
        
        messagingTemplate.convertAndSend("/topic/quick-quiz", quizData);
        
        Map<String, Object> result = new HashMap<>();
        result.put("success", true);
        result.put("quizId", quiz.getId());
        return result;
    }
    
    @GetMapping("/notes")
    public List<TeacherNote> getTeacherNotes(@RequestParam(defaultValue = "1") Long teacherId) {
        return teacherNoteRepository.findByTeacherIdOrderByPinnedAndUpdated(teacherId);
    }
    
    @PostMapping("/notes")
    public Map<String, Object> createNote(@RequestBody Map<String, String> request) {
        Long teacherId = Long.valueOf(request.getOrDefault("teacherId", "1"));
        String title = request.get("title");
        String content = request.get("content");
        String category = request.get("category");
        
        TeacherNote note = new TeacherNote(teacherId, title, content, category);
        teacherNoteRepository.save(note);
        
        Map<String, Object> result = new HashMap<>();
        result.put("success", true);
        result.put("noteId", note.getId());
        return result;
    }
    
    @PutMapping("/notes/{id}")
    public Map<String, Object> updateNote(@PathVariable Long id, @RequestBody Map<String, String> request) {
        TeacherNote note = teacherNoteRepository.findById(id).orElse(null);
        if (note == null) {
            Map<String, Object> result = new HashMap<>();
            result.put("success", false);
            result.put("error", "노트를 찾을 수 없습니다");
            return result;
        }
        
        if (request.get("title") != null) note.setTitle(request.get("title"));
        if (request.get("content") != null) note.setContent(request.get("content"));
        if (request.get("category") != null) note.setCategory(request.get("category"));
        if (request.get("isPinned") != null) note.setIsPinned(Boolean.valueOf(request.get("isPinned")));
        note.setUpdatedAt(LocalDateTime.now());
        
        teacherNoteRepository.save(note);
        
        Map<String, Object> result = new HashMap<>();
        result.put("success", true);
        return result;
    }
    
    @DeleteMapping("/notes/{id}")
    public Map<String, Object> deleteNote(@PathVariable Long id) {
        teacherNoteRepository.deleteById(id);
        Map<String, Object> result = new HashMap<>();
        result.put("success", true);
        return result;
    }
    
    @GetMapping("/notes/categories")
    public List<String> getNoteCategories(@RequestParam(defaultValue = "1") Long teacherId) {
        return teacherNoteRepository.findCategoriesByTeacherId(teacherId);
    }
    
    @MessageMapping("/student-activity")
    @SendTo("/topic/teacher-monitor")
    public Map<String, Object> handleStudentActivity(Map<String, Object> activity) {
        Long userId = Long.valueOf(activity.get("userId").toString());
        String page = (String) activity.get("page");
        String code = (String) activity.get("code");
        Boolean isCoding = (Boolean) activity.get("isCoding");
        
        ActiveSession session = sessionRepository.findByUserId(userId)
            .orElse(new ActiveSession(userId, "session-" + userId, page));
        
        session.setCurrentPage(page);
        session.setCurrentCode(code);
        session.setIsCoding(isCoding);
        session.setLastActivity(LocalDateTime.now());
        
        sessionRepository.save(session);
        
        Map<String, Object> result = new HashMap<>();
        result.put("userId", userId);
        result.put("page", page);
        result.put("isCoding", isCoding);
        result.put("codeLength", code != null ? code.length() : 0);
        result.put("timestamp", LocalDateTime.now());
        
        return result;
    }
}
